package com.devesh.mediaPlayer.swing;

import com.devesh.mediaPlayer.Application;
import com.devesh.mediaPlayer.autostart.AutostartSetter;
import com.devesh.mediaPlayer.converter.ConverterFrame;
import com.devesh.mediaPlayer.utils.Playlist;
import com.devesh.mediaPlayer.utils.SongPlayer;
import com.devesh.mediaPlayer.listHelpers.SngListCellRenderer;
import com.devesh.mediaPlayer.listHelpers.ListItemTransferHandler;
import com.devesh.mediaPlayer.utils.PlayListListener;
import com.devesh.mediaPlayer.utils.Song;
import com.mpatric.mp3agic.InvalidDataException;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Arrays;
import java.util.Scanner;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MainFrame extends javax.swing.JFrame
		implements SongPlayer.SongChangeListener {

	private static Playlist playlist;
	private static SongPlayer player;
	private boolean pbChange = false;
	private final ImageIcon imgPlay, imgPause;
	Logger logger;
	Timer secTimer;

	public MainFrame() {
		logger = LoggerFactory.getLogger(MainFrame.class);
		playlist = new Playlist();
		imgPlay = new javax.swing.ImageIcon(
				getClass().getResource("/play.png"));
		imgPause = new javax.swing.ImageIcon(
				getClass().getResource("/pause.png"));
		player = new SongPlayer(playlist);
		initComponents();

		playlist.addListener(playListListener);
		
		new Timer(1000, (ActionEvent e) -> {
			everySecond();
		}).setRepeats(true);
	}


	public MainFrame(Playlist playlist, SongPlayer player) {
		logger = LoggerFactory.getLogger(MainFrame.class);
		MainFrame.playlist = playlist;
		MainFrame.player = player;
		imgPlay = new javax.swing.ImageIcon(
				getClass().getResource("/play.png"));
		imgPause = new javax.swing.ImageIcon(
				getClass().getResource("/pause.png"));
		initComponents();

		playlist.addListener(playListListener);
		
		secTimer = new Timer(1000, (ActionEvent e) -> {
			everySecond();
		});
		secTimer.setRepeats(true);
		secTimer.start();
	}


	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btmPanel = new javax.swing.JPanel();
        sngTitle = new javax.swing.JLabel();
        ctrlPanel = new javax.swing.JPanel();
        btnPanel = new javax.swing.JPanel();
        btnPre = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        progressBar = new javax.swing.JSlider();
        sldVolume = new javax.swing.JSlider();
        jScrollPane = new javax.swing.JScrollPane();
        spPanel = new javax.swing.JPanel();
        sngList = new javax.swing.JList<>();
        menu = new javax.swing.JMenuBar();
        menFile = new javax.swing.JMenu();
        btnSave = new javax.swing.JMenuItem();
        btnOpn = new javax.swing.JMenuItem();
        btnShuffel = new javax.swing.JMenuItem();
        btnQuit = new javax.swing.JMenuItem();
        menEdit = new javax.swing.JMenu();
        btnAutostart = new javax.swing.JMenuItem();
        menTools = new javax.swing.JMenu();
        btnDownload = new javax.swing.JMenuItem();
        btnConverter = new javax.swing.JMenuItem();

        setTitle("PlayIt Music Player");
        setMinimumSize(new java.awt.Dimension(300, 250));
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        btmPanel.setLayout(new java.awt.GridLayout(2, 1));

        sngTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sngTitle.setText("No Song Playing");
        btmPanel.add(sngTitle);

        ctrlPanel.setLayout(new java.awt.GridBagLayout());

        btnPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        btnPre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/previous.png"))); // NOI18N
        btnPre.setToolTipText("");
        btnPre.setBorder(null);
        btnPre.setBorderPainted(false);
        btnPre.setContentAreaFilled(false);
        btnPre.setFocusable(false);
        btnPre.setIconTextGap(0);
        btnPre.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnPre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreActionPerformed(evt);
            }
        });
        btnPanel.add(btnPre);

        btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/play.png"))); // NOI18N
        btnPlay.setToolTipText("");
        btnPlay.setBorder(null);
        btnPlay.setBorderPainted(false);
        btnPlay.setContentAreaFilled(false);
        btnPlay.setFocusable(false);
        btnPlay.setIconTextGap(0);
        btnPlay.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });
        btnPanel.add(btnPlay);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/next.png"))); // NOI18N
        btnNext.setToolTipText("");
        btnNext.setBorder(null);
        btnNext.setBorderPainted(false);
        btnNext.setContentAreaFilled(false);
        btnNext.setFocusable(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        btnPanel.add(btnNext);

        ctrlPanel.add(btnPanel, new java.awt.GridBagConstraints());

        progressBar.setToolTipText("Progress");
        progressBar.setValue(0);
        progressBar.setBorder(null);
        progressBar.setDoubleBuffered(true);
        progressBar.setFocusable(false);
        progressBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                progressBarMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                progressBarMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        ctrlPanel.add(progressBar, gridBagConstraints);

        sldVolume.setToolTipText("Volume");
        sldVolume.setValue(100);
        sldVolume.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sldVolume.setDoubleBuffered(true);
        sldVolume.setFocusable(false);
        sldVolume.setPreferredSize(new java.awt.Dimension(50, 21));
        sldVolume.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldVolumeStateChanged(evt);
            }
        });
        sldVolume.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                sldVolumeMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        ctrlPanel.add(sldVolume, gridBagConstraints);

        btmPanel.add(ctrlPanel);

        getContentPane().add(btmPanel, java.awt.BorderLayout.SOUTH);

        jScrollPane.setBorder(null);
        jScrollPane.setAutoscrolls(true);
        jScrollPane.setViewportView(null);

        spPanel.setToolTipText("");
        spPanel.setAutoscrolls(true);
        spPanel.setLayout(new java.awt.BorderLayout());

        sngList.setBorder(null);
        sngList.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        sngList.setModel(playlist.getListModel());
        sngList.setCellRenderer(new SngListCellRenderer(playlist));
        sngList.setDoubleBuffered(true);
        sngList.setDragEnabled(true);
        sngList.setDropMode(javax.swing.DropMode.INSERT);
        sngList.setFocusable(false);
        sngList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sngListFocusGained(evt);
            }
        });
        sngList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sngListMouseClicked(evt);
            }
        });
        sngList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                sngListKeyPressed(evt);
            }
        });
        sngList.setTransferHandler(new ListItemTransferHandler(playlist, player));
        spPanel.add(sngList, java.awt.BorderLayout.CENTER);

        jScrollPane.setViewportView(spPanel);

        jScrollPane.getVerticalScrollBar().setUnitIncrement(16);
        getContentPane().add(jScrollPane, java.awt.BorderLayout.CENTER);

        menu.setFocusable(false);

        menFile.setText("File");
        menFile.setFocusable(false);

        btnSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        btnSave.setText("Save Playlist");
        btnSave.setToolTipText("Save the playlist to a file");
        btnSave.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        menFile.add(btnSave);

        btnOpn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        btnOpn.setText("Open");
        btnOpn.setToolTipText("Open File");
        btnOpn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnOpn.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnOpn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpnActionPerformed(evt);
            }
        });
        menFile.add(btnOpn);

        btnShuffel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        btnShuffel.setText("Shuffel");
        btnShuffel.setToolTipText("Reorder the playlist");
        btnShuffel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnShuffel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnShuffel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShuffelActionPerformed(evt);
            }
        });
        menFile.add(btnShuffel);

        btnQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        btnQuit.setText("Quit");
        btnQuit.setToolTipText("Quit the player");
        btnQuit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnQuit.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });
        menFile.add(btnQuit);

        menu.add(menFile);

        menEdit.setText("Edit");

        btnAutostart.setText("Autostart");
        btnAutostart.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnAutostart.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnAutostart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutostartActionPerformed(evt);
            }
        });
        menEdit.add(btnAutostart);

        menu.add(menEdit);

        menTools.setText("Tools");

        btnDownload.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        btnDownload.setText("Download Songs");
        btnDownload.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnDownload.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });
        menTools.add(btnDownload);

        btnConverter.setText("Converter");
        btnConverter.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnConverter.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnConverter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConverterActionPerformed(evt);
            }
        });
        menTools.add(btnConverter);

        menu.add(menTools);

        setJMenuBar(menu);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpnActionPerformed
		File[] files = Application.showOpenDialog();
		if(files != null){
			openMedia(files);
		}
    }//GEN-LAST:event_btnOpnActionPerformed


	public void openMedia(File[] files)
	{
		Thread openThread = new Thread(() -> {
			for(File file : files)
			{
				String filename = file.getPath();
				if (filename.endsWith(".ppl"))
				{
					try
					{
						Scanner scanner = new Scanner(file);
						while (scanner.hasNext())
						{
							playlist.addSong(
									new Song(
											new File(scanner.nextLine().replace(
													"\n", ""))));
						}
					} catch (InvalidDataException | IOException ex)
					{
						logger.error("Error while opening playlist", ex);
					}
				} else
				{
					try
					{
						playlist.addSong(new Song(file));
					} catch (InvalidDataException | IOException ex)
					{
						logger.error(
								"Error while opening file: " + file.getPath(),
								ex);
					}
				}
			}
			updatePlayIcon();
		});
		openThread.start();
	}


    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
		play();
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
		player.next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreActionPerformed
		player.previous();
    }//GEN-LAST:event_btnPreActionPerformed

    private void sngListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sngListMouseClicked
		if(evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1){
			int index = sngList.getSelectedIndex();
			if(index != -1)
				player.play(index);
		}else if(SwingUtilities.isRightMouseButton(evt)){
			showSngListPopup(evt);
		}
		
		if(!SwingUtilities.isMiddleMouseButton(evt)){
			cursor = sngList.locationToIndex(evt.getPoint());
		}
		
		updatePlayIcon();
    }//GEN-LAST:event_sngListMouseClicked

    private void sldVolumeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldVolumeStateChanged
		player.setVoulume(sldVolume.getValue()/100f);
    }//GEN-LAST:event_sldVolumeStateChanged

    private void sngListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sngListKeyPressed
		if((evt.getKeyCode() == KeyEvent.VK_ENTER || evt.getKeyCode() == KeyEvent.VK_NUMPAD5) 
				&& sngList.hasFocus()){
			int index = sngList.getSelectedIndex();
			if(index != -1)
				player.play(index);
		}
		updatePlayIcon();
    }//GEN-LAST:event_sngListKeyPressed

    private void progressBarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_progressBarMousePressed
		pbChange = true;
    }//GEN-LAST:event_progressBarMousePressed

    private void progressBarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_progressBarMouseReleased
		if(pbChange)
		{
			player.setProgress(progressBar.getValue());
		}
		
		pbChange = false;
    }//GEN-LAST:event_progressBarMouseReleased

    private void sldVolumeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sldVolumeMouseReleased
    }//GEN-LAST:event_sldVolumeMouseReleased

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
		int index;
		
		switch (evt.getKeyCode()) {
			
			case KeyEvent.VK_UP -> {
				if(evt.isControlDown())
					sldVolume.setValue(sldVolume.getValue() + 5);
				else if(evt.isShiftDown()){
					moveUp(true);
				}
				else
					moveUp(false);
			}
			
			case KeyEvent.VK_DOWN -> {
				if(evt.isControlDown())
					sldVolume.setValue(sldVolume.getValue() - 5);
				else if(evt.isShiftDown())
					moveDown(true);
				else
					moveDown(false);
			}
			
			case KeyEvent.VK_SPACE -> play();
			
			case KeyEvent.VK_LEFT -> {
				if(evt.isControlDown()){
					player.previous();
					sngList.ensureIndexIsVisible(playlist.currentSong);
				}
			}
			
			case KeyEvent.VK_RIGHT -> {
				if(evt.isControlDown()){
					player.next();
					sngList.ensureIndexIsVisible(playlist.currentSong);
				}
			}
			
			case KeyEvent.VK_ENTER -> {
				index = sngList.getSelectedIndex();
				if(index != -1){
					player.play(index);
				}
			}
			
			case KeyEvent.VK_NUMPAD5 -> {
				index = sngList.getSelectedIndex();
				if(index != -1)
					player.play(index);
			}
			
			case KeyEvent.VK_DELETE -> {
				removeSelected();
			}
			
			case KeyEvent.VK_W -> {
				if(evt.isControlDown())
					setVisible(false);
			}
			
			default -> {
			}
		}
		updatePlayIcon();
    }//GEN-LAST:event_formKeyPressed

    private void btnShuffelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShuffelActionPerformed
		shuffel();
    }//GEN-LAST:event_btnShuffelActionPerformed


	private void moveUp(boolean keepSelected)
	{
		if (sngList.getSelectedIndex() == -1)
			cursor = -1;
		if (cursor > 0)
		{
			if (keepSelected)
			{
				int[] selectedInd = sngList.getSelectedIndices();
				int destInd = Arrays.binarySearch(selectedInd, cursor - 1);
				int[] newSelection;
				// check if the new cursor pos is selected
				if (destInd < 0)
				{
					// if not select it
					newSelection = Arrays.copyOf(selectedInd,
							selectedInd.length + 1);
					newSelection[newSelection.length - 1] = --cursor;
				} else
				{
					// deselect it
					selectedInd[destInd + 1] = -1;
					newSelection = selectedInd;
					cursor--;
				}
				sngList.setSelectedIndices(newSelection);
			} else
				sngList.setSelectedIndex(--cursor);
			sngList.ensureIndexIsVisible(cursor);
		}
	}


	private void moveDown(boolean keepSelected)
	{
		if (sngList.getSelectedIndex() == -1)
			cursor = -1;
		if (cursor != sngList.getModel().getSize() - 1)
		{
			if (keepSelected)
			{
				int[] selectedInd = sngList.getSelectedIndices();
				int destInd = Arrays.binarySearch(selectedInd, cursor + 1);
				int[] newSelection;
				// check if the new cursor pos is selected
				if (destInd < 0)
				{
					// if not select it
					newSelection = Arrays.copyOf(selectedInd,
							selectedInd.length + 1);
					newSelection[newSelection.length - 1] = ++cursor;
				} else
				{
					// deselect it
					selectedInd[destInd - 1] = -1;
					newSelection = selectedInd;
					cursor++;
				}
				sngList.setSelectedIndices(newSelection);
			} else
				sngList.setSelectedIndex(++cursor);
			sngList.ensureIndexIsVisible(cursor);
		}
	}


	public void shuffel()
	{
		boolean paused = false;
		if (player.status == SongPlayer.PLAYING)
		{
			player.pause();
			paused = true;
		}
		playlist.shuffel();
		if (paused)
			player.resume();
	}


    private void sngListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sngListFocusGained
    }//GEN-LAST:event_sngListFocusGained

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
		Application.quit();
    }//GEN-LAST:event_btnQuitActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
		save();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAutostartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutostartActionPerformed
		AutostartSetter setter = new AutostartSetter(this, true);
		setter.setVisible(true);
    }//GEN-LAST:event_btnAutostartActionPerformed

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
		try 
		{
			Desktop desktop = Desktop.getDesktop();
			logger.info("redirecting to https://ytmdl.deepjyoti30.dev/search");
			desktop.browse(new URI("https://ytmdl.deepjyoti30.dev/search"));
		} catch (URISyntaxException | IOException ex) 
		{
			logger.error("Exception while redirecting", ex);
		}
    }//GEN-LAST:event_btnDownloadActionPerformed

    private void btnConverterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConverterActionPerformed
		new ConverterFrame().setVisible(true);
    }//GEN-LAST:event_btnConverterActionPerformed


	public void save()
	{
		metaDir.mkdirs();

		File lastLoc = new File(metaDir.getPath() + "\\lastLoc.dat");

		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fileChooser.setMultiSelectionEnabled(true);
		fileChooser.setFileFilter(
				new FileNameExtensionFilter("PlayIt playlist file", "ppl"));
		fileChooser.removeChoosableFileFilter(
				fileChooser.getAcceptAllFileFilter());

		if (lastLoc.exists())
		{
			try
			{
				Scanner scanner = new Scanner(lastLoc);
				File file = new File(scanner.nextLine());
				if (file.exists())
					fileChooser.setCurrentDirectory(file);
			} catch (FileNotFoundException ex)
			{
				ex.printStackTrace();
			}
		}

		int i = fileChooser.showSaveDialog(this);
		if (i == JFileChooser.APPROVE_OPTION)
		{
			File file = fileChooser.getSelectedFile();
			String filename = file.getPath();
			if (!filename.endsWith(".ppl"))
				filename += ".ppl";
			file = new File(filename);
			if (file.exists())
				file.delete();
			try
			{
				file.createNewFile();
				try (BufferedWriter writer = new BufferedWriter(
						new FileWriter(file)))
				{
					for(Song song : playlist.getPlayList())
					{
						writer.append(song.getFile().getPath());
						writer.newLine();
					}
				}
			} catch (IOException ex)
			{
				ex.printStackTrace();
			}
		}
		if (lastLoc.exists())
			lastLoc.delete();
		try
		{
			lastLoc.createNewFile();
			try (BufferedWriter bw = new BufferedWriter(
					new FileWriter(lastLoc)))
			{
				bw.write(fileChooser.getCurrentDirectory().getPath());
				bw.close();
			}
		} catch (IOException ex)
		{
			ex.printStackTrace();
		}
		updatePlayIcon();
	}


	private void showSngListPopup(MouseEvent evt)
	{
		int row = sngList.locationToIndex(evt.getPoint());
		if (!sngList.isSelectedIndex(row))
			sngList.setSelectedIndex(row);

		JPopupMenu popupMenu = new JPopupMenu();

		JMenuItem miRemove = new JMenuItem("Remove");
		miRemove.addActionListener((ActionEvent ev) -> {
			removeSelected();
		});

		JMenuItem miPlay = new JMenuItem("Play");
		miPlay.addActionListener((ActionEvent e) -> {
			player.play(sngList.getSelectedIndex());
			updatePlayIcon();
		});

		popupMenu.add(miPlay);
		popupMenu.add(miRemove);
		popupMenu.show(sngList, evt.getX(), evt.getY());
	}


	private void removeSelected()
	{
		while (sngList.getSelectedIndex() != -1)
		{
			int index = sngList.getSelectedIndex();
			if (playlist.currentSong == index)
			{
				player.next();
			}
			if (playlist.currentSong == index)
			{
				player.stop();
			}
			playlist.removeSong(index);
			updatePlayIcon();
		}
	}


	public void play()
	{
		switch (player.status) {
		case SongPlayer.STOPED -> player.play();
		case SongPlayer.PAUSED -> player.resume();
		case SongPlayer.PLAYING -> player.pause();
		default -> {
		}
		}
		updatePlayIcon();
	}


	@Override
	public void songChanged()
	{
		sngList.repaint();
		updatePlayIcon();
	}
	
	private void everySecond(){
		if(!pbChange && player != null)
			progressBar.setValue(player.getProgressPercentage());
	}


	private void updatePlayIcon()
	{
		switch (player.status) {
		case SongPlayer.STOPED -> {
			btnPlay.setIcon(imgPlay);
			sngTitle.setText("No Song Playing");
		}
		case SongPlayer.PAUSED -> {
			btnPlay.setIcon(imgPlay);
			sngTitle.setText(playlist.getCurrentSong().getTitle());
		}
		case SongPlayer.PLAYING -> {
			btnPlay.setIcon(imgPause);
			sngTitle.setText(playlist.getCurrentSong().getTitle());
		}
		default -> {
		}
		}
	}


	private void songAdded(int index)
	{
		if (player.status != SongPlayer.PLAYING && playlist.size() > 0)
		{
			player.play(index);
		}
		sngTitle.setText(playlist.getCurrentSong().getTitle());
		updatePlayIcon();
		sngList.repaint();
	}


	public void setPlaylist(Playlist playlist)
	{
		sngList.setModel(playlist.getListModel());
		sngList.setTransferHandler(
				new ListItemTransferHandler(playlist, player));
		sngList.setCellRenderer(
				new SngListCellRenderer(playlist));
		sngTitle.setText(playlist.getCurrentSong().getTitle());
		MainFrame.playlist = playlist;
	}

	private final PlayListListener playListListener = (int index) -> {
		songAdded(index);
	};

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel btmPanel;
    private javax.swing.JMenuItem btnAutostart;
    private javax.swing.JMenuItem btnConverter;
    private javax.swing.JMenuItem btnDownload;
    private javax.swing.JButton btnNext;
    private javax.swing.JMenuItem btnOpn;
    private javax.swing.JPanel btnPanel;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnPre;
    private javax.swing.JMenuItem btnQuit;
    private javax.swing.JMenuItem btnSave;
    private javax.swing.JMenuItem btnShuffel;
    private javax.swing.JPanel ctrlPanel;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JMenu menEdit;
    private javax.swing.JMenu menFile;
    private javax.swing.JMenu menTools;
    private javax.swing.JMenuBar menu;
    private javax.swing.JSlider progressBar;
    private javax.swing.JSlider sldVolume;
    private javax.swing.JList<String> sngList;
    private javax.swing.JLabel sngTitle;
    private javax.swing.JPanel spPanel;
    // End of variables declaration//GEN-END:variables
	private int cursor = -1;
	private static final File metaDir = new File(
	  System.getProperty("user.home") + "\\appdata\\local\\PlayIt");
}
