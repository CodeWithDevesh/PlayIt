package com.devesh.mediaPlayer.swing;

import com.devesh.mediaPlayer.Application;
import static com.devesh.mediaPlayer.Application.logger;
import com.devesh.mediaPlayer.Managers.MainFrameManager;
import com.devesh.mediaPlayer.Managers.SngListManager;
import com.devesh.mediaPlayer.Settings;
import com.devesh.mediaPlayer.autostart.AutostartSetter;
import com.devesh.mediaPlayer.utils.Playlist;
import com.devesh.mediaPlayer.utils.SongPlayer;
import com.devesh.mediaPlayer.listHelpers.SngListCellRenderer;
import com.devesh.mediaPlayer.listHelpers.ListItemTransferHandler;
import com.devesh.mediaPlayer.listeners.PlayListListener;
import com.devesh.mediaPlayer.utils.Song;
import com.devesh.mediaPlayer.Managers.VolumeManager;
import com.mpatric.mp3agic.InvalidDataException;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Scanner;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import javazoom.jl.decoder.JavaLayerException;

public class MainFrame extends javax.swing.JFrame
		implements SongPlayer.SongChangeListener {

	private static Playlist playlist;
	private static SongPlayer player;
	private boolean pbChange = false;
	private final ImageIcon imgPlay, imgPause;
	Timer secTimer;
	private String view = "list";

	public static VolumeManager volManager;
	public static SngListManager sngListManager;
	public static MainFrameManager manager;
	private boolean loading = false;

	public MainFrame(Playlist playlist, SongPlayer player) {
		MainFrame.playlist = playlist;
		MainFrame.player = player;
		imgPlay = new javax.swing.ImageIcon(
				getClass().getResource("/play.png"));
		imgPause = new javax.swing.ImageIcon(
				getClass().getResource("/pause.png"));

		volManager = new VolumeManager();
		sngListManager = new SngListManager(this);
		manager = new MainFrameManager(this);
		this.addKeyListener(manager);
		galleryPanel = sngListManager.getGalleryPanel();

		initComponents();

		playlist.addListener(playListListener);

		secTimer = new Timer(1000, (ActionEvent e) -> {
			everySecond();
		});
		secTimer.setRepeats(true);
		secTimer.start();

		setExtendedState(getExtendedState() | MAXIMIZED_BOTH);

		if (Settings.isGalleryView())
			cbxGallery.doClick();
	}


	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btmPanel = new javax.swing.JPanel();
        sngTitle = new javax.swing.JLabel();
        ctrlPanel = new javax.swing.JPanel();
        btnPanel = new javax.swing.JPanel();
        btnPre = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        lblCompInfo = new javax.swing.JLabel();
        progressBar = new javax.swing.JSlider();
        sldVolume = volManager.getSlider();
        lblTtlTime = new javax.swing.JLabel();
        jScrollPane = new javax.swing.JScrollPane();
        spPanel = new javax.swing.JPanel();
        sngList = sngListManager.GetList();
        menu = new javax.swing.JMenuBar();
        menFile = new javax.swing.JMenu();
        btnSave = new javax.swing.JMenuItem();
        btnOpn = new javax.swing.JMenuItem();
        btnShuffel = new javax.swing.JMenuItem();
        btnQuit = new javax.swing.JMenuItem();
        menEdit = new javax.swing.JMenu();
        btnAutostart = new javax.swing.JMenuItem();
        btnPrefs = new javax.swing.JMenuItem();
        menView = new javax.swing.JMenu();
        cbxGallery = new javax.swing.JCheckBoxMenuItem();
        menTools = new javax.swing.JMenu();
        btnDownload = new javax.swing.JMenuItem();
        btnConverter = new javax.swing.JMenuItem();
        menHelp = new javax.swing.JMenu();
        btnHelKey = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("PlayIt Music Player");
        setMinimumSize(new java.awt.Dimension(300, 250));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btmPanel.setLayout(new java.awt.GridLayout(2, 1));

        sngTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        sngTitle.setText("No Song Playing");
        btmPanel.add(sngTitle);

        ctrlPanel.setLayout(new java.awt.GridBagLayout());

        btnPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        btnPre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/previous.png"))); // NOI18N
        btnPre.setToolTipText("");
        btnPre.setBorder(null);
        btnPre.setBorderPainted(false);
        btnPre.setContentAreaFilled(false);
        btnPre.setFocusable(false);
        btnPre.setIconTextGap(0);
        btnPre.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnPre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreActionPerformed(evt);
            }
        });
        btnPanel.add(btnPre);

        btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/play.png"))); // NOI18N
        btnPlay.setToolTipText("");
        btnPlay.setBorder(null);
        btnPlay.setBorderPainted(false);
        btnPlay.setContentAreaFilled(false);
        btnPlay.setFocusable(false);
        btnPlay.setIconTextGap(0);
        btnPlay.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });
        btnPanel.add(btnPlay);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/next.png"))); // NOI18N
        btnNext.setToolTipText("");
        btnNext.setBorder(null);
        btnNext.setBorderPainted(false);
        btnNext.setContentAreaFilled(false);
        btnNext.setFocusable(false);
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        btnPanel.add(btnNext);

        ctrlPanel.add(btnPanel, new java.awt.GridBagConstraints());

        lblCompInfo.setText("00:00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 9, 0, 5);
        ctrlPanel.add(lblCompInfo, gridBagConstraints);

        progressBar.setToolTipText("Progress");
        progressBar.setValue(0);
        progressBar.setBorder(null);
        progressBar.setDoubleBuffered(true);
        progressBar.setFocusable(false);
        progressBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                progressBarMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                progressBarMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 10.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        ctrlPanel.add(progressBar, gridBagConstraints);

        sldVolume.setToolTipText("Volume");
        sldVolume.setValue(100);
        sldVolume.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        sldVolume.setDoubleBuffered(true);
        sldVolume.setFocusable(false);
        sldVolume.setPreferredSize(new java.awt.Dimension(51, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 6, 0, 6);
        ctrlPanel.add(sldVolume, gridBagConstraints);

        lblTtlTime.setText("00:00");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 9);
        ctrlPanel.add(lblTtlTime, gridBagConstraints);

        btmPanel.add(ctrlPanel);

        getContentPane().add(btmPanel, java.awt.BorderLayout.SOUTH);

        jScrollPane.setBorder(null);
        jScrollPane.setAutoscrolls(true);
        jScrollPane.setViewportView(null);

        spPanel.setToolTipText("");
        spPanel.setAutoscrolls(true);
        spPanel.setLayout(new java.awt.BorderLayout());

        sngList.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        sngList.setModel(playlist.getListModel());
        sngList.setCellRenderer(new SngListCellRenderer(playlist));
        sngList.setDoubleBuffered(true);
        sngList.setDragEnabled(true);
        sngList.setDropMode(javax.swing.DropMode.INSERT);
        sngList.setFocusable(false);
        sngList.setTransferHandler(new ListItemTransferHandler(playlist, player));
        spPanel.add(sngList, java.awt.BorderLayout.CENTER);

        jScrollPane.setViewportView(spPanel);

        jScrollPane.getVerticalScrollBar().setUnitIncrement(16);
        getContentPane().add(jScrollPane, java.awt.BorderLayout.CENTER);

        menu.setFocusable(false);

        menFile.setText("File");
        menFile.setFocusable(false);

        btnSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        btnSave.setText("Save Playlist");
        btnSave.setToolTipText("Save the playlist to a file");
        btnSave.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        menFile.add(btnSave);

        btnOpn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        btnOpn.setText("Open");
        btnOpn.setToolTipText("Open File");
        btnOpn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnOpn.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnOpn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpnActionPerformed(evt);
            }
        });
        menFile.add(btnOpn);

        btnShuffel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        btnShuffel.setText("Shuffel");
        btnShuffel.setToolTipText("Reorder the playlist");
        btnShuffel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnShuffel.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnShuffel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShuffelActionPerformed(evt);
            }
        });
        menFile.add(btnShuffel);

        btnQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        btnQuit.setText("Quit");
        btnQuit.setToolTipText("Quit the player");
        btnQuit.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnQuit.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });
        menFile.add(btnQuit);

        menu.add(menFile);

        menEdit.setText("Edit");

        btnAutostart.setText("Autostart");
        btnAutostart.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnAutostart.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnAutostart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAutostartActionPerformed(evt);
            }
        });
        menEdit.add(btnAutostart);

        btnPrefs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        btnPrefs.setText("Preferences");
        btnPrefs.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnPrefs.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnPrefs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrefsActionPerformed(evt);
            }
        });
        menEdit.add(btnPrefs);

        menu.add(menEdit);

        menView.setText("View");

        cbxGallery.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        cbxGallery.setText("Gallery View");
        cbxGallery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxGalleryActionPerformed(evt);
            }
        });
        menView.add(cbxGallery);

        menu.add(menView);

        menTools.setText("Tools");

        btnDownload.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        btnDownload.setText("Download Songs");
        btnDownload.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnDownload.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });
        menTools.add(btnDownload);

        btnConverter.setText("Converter");
        btnConverter.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnConverter.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnConverter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConverterActionPerformed(evt);
            }
        });
        menTools.add(btnConverter);

        menu.add(menTools);

        menHelp.setText("Help");

        btnHelKey.setText("Keymaps");
        btnHelKey.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnHelKey.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnHelKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHelKeyActionPerformed(evt);
            }
        });
        menHelp.add(btnHelKey);

        menu.add(menHelp);

        setJMenuBar(menu);

        setSize(new java.awt.Dimension(660, 480));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpnActionPerformed
		File[] files = Application.showOpenDialog();
		if(files != null){
			openMedia(files);
		}
    }//GEN-LAST:event_btnOpnActionPerformed


	public void openMedia(File[] files)
	{
		if (files == null)
			return;
		Thread openThread = new Thread(() -> {
			loading = true;
			File songFile;
			for(File file : files)
			{
				if (!file.exists())
					continue;
				String filename = file.getPath();
				if (filename.endsWith(".ppl"))
				{
					try
					{
						Scanner scanner = new Scanner(file);
						while (scanner.hasNext())
						{
							songFile = new File(scanner.nextLine().replace(
									"\n", ""));
							if (songFile.exists())
								playlist.addSong(new Song(songFile));
							else
							{
								JOptionPane.showMessageDialog(this,
										"Could not find " + songFile.getName(),
										"Error", JOptionPane.ERROR_MESSAGE);
							}
						}
					} catch (InvalidDataException | IOException ex)
					{
						logger.error("Error while opening playlist", ex);
					}
				} else
				{
					try
					{
						playlist.addSong(new Song(file));
					} catch (InvalidDataException | IOException ex)
					{
						logger.error(
								"Error while opening file: "
										+ file.getPath(),
								ex);
					}
				}
			}
			Application.opened();
			updatePlayIcon();
			loading = false;
		});
		openThread.start();
	}


    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
		play();
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
		player.next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreActionPerformed
		player.previous();
    }//GEN-LAST:event_btnPreActionPerformed

    private void progressBarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_progressBarMousePressed
		pbChange = true;
    }//GEN-LAST:event_progressBarMousePressed

    private void progressBarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_progressBarMouseReleased
		if(pbChange)
		{
			player.setProgress(progressBar.getValue());
		}
		
		pbChange = false;
    }//GEN-LAST:event_progressBarMouseReleased

    private void btnShuffelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShuffelActionPerformed
		shuffel();
    }//GEN-LAST:event_btnShuffelActionPerformed


	public void shuffel()
	{
		boolean paused = false;
		if (player.status == SongPlayer.PLAYING)
		{
			player.pause();
			paused = true;
		}
		if (playlist.size() > 0)
			playlist.shuffel();
		if (paused)
			player.resume();
	}


    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
		Application.quit();
    }//GEN-LAST:event_btnQuitActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
		save();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnAutostartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAutostartActionPerformed
		AutostartSetter setter = new AutostartSetter(this, true);
		setter.setVisible(true);
    }//GEN-LAST:event_btnAutostartActionPerformed

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
		try 
		{
			Desktop desktop = Desktop.getDesktop();
			logger.info("redirecting to " + Settings.getDownloadLink());
			desktop.browse(new URI(Settings.getDownloadLink()));
		} catch (URISyntaxException | IOException ex) 
		{
			logger.error("Exception while redirecting", ex);
			JOptionPane.showMessageDialog(this, 
				 "Error while redirecting, check the url in prefs", 
					null, JOptionPane.ERROR_MESSAGE);
		}
    }//GEN-LAST:event_btnDownloadActionPerformed

    private void btnConverterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConverterActionPerformed
		new ConverterFrame().setVisible(true);
    }//GEN-LAST:event_btnConverterActionPerformed

    private void btnPrefsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrefsActionPerformed
		new PreferencesFrame().setVisible(true);
    }//GEN-LAST:event_btnPrefsActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		if(Settings.isMinOnClose())
			setVisible(false);
		else 
			Application.quit();
    }//GEN-LAST:event_formWindowClosing

    private void cbxGalleryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxGalleryActionPerformed
		Thread thread = new Thread(() -> {
			while(loading)
				logger.info("waiting for loading to complete");
			SwingUtilities.invokeLater(() -> {
				if(cbxGallery.isSelected()){
					view = "gallery";
					galleryPanel.setActivated(true);
					jScrollPane.setViewportView(galleryPanel);
					jScrollPane.validate();
					Settings.setGalleryView(true);
				}else{
					view = "list";
					galleryPanel.setActivated(false);
					jScrollPane.setViewportView(spPanel);
					jScrollPane.validate();
					Settings.setGalleryView(false);
				}
			});
		});
		thread.start();
    }//GEN-LAST:event_cbxGalleryActionPerformed

    private void btnHelKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHelKeyActionPerformed
		new KeymapsFrame().setVisible(true);
    }//GEN-LAST:event_btnHelKeyActionPerformed


	public void save()
	{
		metaDir.mkdirs();

		File lastLoc = new File(metaDir.getPath() + "\\lastLoc.dat");

		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		fileChooser.setMultiSelectionEnabled(true);
		fileChooser.setFileFilter(
				new FileNameExtensionFilter("PlayIt playlist file", "ppl"));
		fileChooser.removeChoosableFileFilter(
				fileChooser.getAcceptAllFileFilter());

		if (lastLoc.exists())
		{
			try
			{
				Scanner scanner = new Scanner(lastLoc);
				File file = new File(scanner.nextLine());
				if (file.exists())
					fileChooser.setCurrentDirectory(file);
			} catch (FileNotFoundException ex)
			{
				ex.printStackTrace();
			}
		}

		int i = fileChooser.showSaveDialog(this);
		if (i == JFileChooser.APPROVE_OPTION)
		{
			File file = fileChooser.getSelectedFile();
			String filename = file.getPath();
			if (!filename.endsWith(".ppl"))
				filename += ".ppl";
			file = new File(filename);
			if (file.exists())
				file.delete();
			try
			{
				file.createNewFile();
				try (BufferedWriter writer = new BufferedWriter(
						new FileWriter(file)))
				{
					for(Song song : playlist.getPlayList())
					{
						writer.append(song.getFile().getPath());
						writer.newLine();
					}
				}
			} catch (IOException ex)
			{
				ex.printStackTrace();
			}
		}
		if (lastLoc.exists())
			lastLoc.delete();
		try
		{
			lastLoc.createNewFile();
			try (BufferedWriter bw = new BufferedWriter(
					new FileWriter(lastLoc)))
			{
				bw.write(fileChooser.getCurrentDirectory().getPath());
				bw.close();
			}
		} catch (IOException ex)
		{
			ex.printStackTrace();
		}
		updatePlayIcon();
	}


	public void play()
	{
		switch (player.status) {
		case SongPlayer.STOPED -> {
			try
			{
				player.play();
			} catch (FileNotFoundException | JavaLayerException ex)
			{
				logger.error(null, ex);
			}
		}

		case SongPlayer.PAUSED -> player.resume();
		case SongPlayer.PLAYING -> player.pause();
		default -> {
		}
		}
		updatePlayIcon();
	}


	@Override
	public void songChanged()
	{
		sngList.repaint();
		lblTtlTime
				.setText(getTimeString(playlist.getCurrentSong().getLength() * 1000));
		updatePlayIcon();
	}


	private void everySecond()
	{
		if (!pbChange && player != null && isVisible())
			progressBar.setValue(player.getProgressPercentage());
		if (isVisible())
		{
			if (player.status == SongPlayer.PLAYING)
			{
				lblCompInfo.setText(getTimeString(player.getProgressMillis()));
			} else if (player.status == SongPlayer.STOPED)
			{
				lblCompInfo.setText("00:00");
				lblTtlTime.setText("00:00");
			}
		}
	}


	public void updatePlayIcon()
	{
		Runnable run = () -> {
			switch (player.status) {
			case SongPlayer.STOPED -> {
				btnPlay.setIcon(imgPlay);
				sngTitle.setText("No Song Playing");
			}
			case SongPlayer.PAUSED -> {
				btnPlay.setIcon(imgPlay);
				sngTitle.setText(playlist.getCurrentSong().getTitle());
				galleryPanel.setCurrentSong(playlist.currentSong);
			}
			case SongPlayer.PLAYING -> {
				btnPlay.setIcon(imgPause);
				sngTitle.setText(playlist.getCurrentSong().getTitle());
				galleryPanel.setCurrentSong(playlist.currentSong);
			}
			default -> {
			}
			}
			Application.getTray().updateTooltip();
		};
		if (SwingUtilities.isEventDispatchThread())
			run.run();
		else
			SwingUtilities.invokeLater(run);
	}


	private void songAdded(int index)
	{
		if (player.status != SongPlayer.PLAYING && playlist.size() > 0)
		{
			player.play(index);
		}
		sngTitle.setText(playlist.getCurrentSong().getTitle());
		updatePlayIcon();
		sngList.repaint();
	}


	public void setPlaylist(Playlist playlist)
	{
		sngList.setModel(playlist.getListModel());
		sngList.setTransferHandler(
				new ListItemTransferHandler(playlist, player));
		sngList.setCellRenderer(
				new SngListCellRenderer(playlist));
		sngTitle.setText(playlist.getCurrentSong().getTitle());
		MainFrame.playlist = playlist;
	}

	private final PlayListListener playListListener = new PlayListListener() {
		@Override
		public void sngAdded(int index)
		{
			songAdded(index);
		}


		@Override
		public void sngRemoved(int index)
		{
		}


		@Override
		public void shuffeled()
		{
		}
	};

	public String getView()
	{
		return view;
	}


	private String getTimeString(long millis)
	{
		long sec, min, hour;
		hour = millis / 3600000;
		millis = millis % 3600000;
		min = millis / 60000;
		millis = millis % 60000;
		sec = millis / 1000;
		if (hour > 0)
			return String.format("%02d:%02d:%02d", hour, min, sec);
		else
			return String.format("%02d:%02d", min, sec);
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel btmPanel;
    private javax.swing.JMenuItem btnAutostart;
    private javax.swing.JMenuItem btnConverter;
    private javax.swing.JMenuItem btnDownload;
    private javax.swing.JMenuItem btnHelKey;
    private javax.swing.JButton btnNext;
    private javax.swing.JMenuItem btnOpn;
    private javax.swing.JPanel btnPanel;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnPre;
    private javax.swing.JMenuItem btnPrefs;
    private javax.swing.JMenuItem btnQuit;
    private javax.swing.JMenuItem btnSave;
    private javax.swing.JMenuItem btnShuffel;
    private javax.swing.JCheckBoxMenuItem cbxGallery;
    private javax.swing.JPanel ctrlPanel;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JLabel lblCompInfo;
    private javax.swing.JLabel lblTtlTime;
    private javax.swing.JMenu menEdit;
    private javax.swing.JMenu menFile;
    private javax.swing.JMenu menHelp;
    private javax.swing.JMenu menTools;
    private javax.swing.JMenu menView;
    private javax.swing.JMenuBar menu;
    private javax.swing.JSlider progressBar;
    private javax.swing.JSlider sldVolume;
    private javax.swing.JList<String> sngList;
    private javax.swing.JLabel sngTitle;
    private javax.swing.JPanel spPanel;
    // End of variables declaration//GEN-END:variables
	private final GalleryPanel galleryPanel;
	private static final File metaDir = new File(
	  System.getProperty("user.home") + "\\appdata\\local\\PlayIt");

}
